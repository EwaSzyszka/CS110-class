#Finding heap median and and pushing elements to min and max heap

import heapstuff
import heapq

def median_finder (minh, maxh):
    
    if len(minh)>len(maxh):
        return max(minh)
    elif len(maxh)>len(minh):
        return min(maxh)
    elif len(minh)==len(maxh):
        return (max(minh) + min(maxh)) /2.0

    
def add_to_median_heap(minh, maxh, a):  
    
    if min(minh) < a:
        heapq.heappush(minh, a)  #a is places at the right spot in min heap
        
    elif max(maxh) > a:
        maxh.append(a) #a is appended in the heap
        heapify(maxh) #maxh is max heapified 
        
    print maxh, minh


minh = [3, 5, 9, 6, 8, 20, 10, 12, 18, 9]
maxh = [20, 18, 10, 12, 9, 9, 3, 5, 6, 8]

add_to_median_heap(minh, maxh, 1)
