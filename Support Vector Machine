%matplotlib inline
import matplotlib.pyplot as plt
plt.style.use('seaborn-whitegrid')
import numpy as np

data = [[9,10,0],[8,7,0],[8,8,0],[11,9,0],[12,10,0],[9,10,0],[15,14,0],[20,22,0],[11,10,0],
[9,12,0],[10,19,0],[15,18,0],[12,16,0],[8,24,0],[16,18,0],[14,20,0],[16,12,0],[14,16,0],
[14,15,0],[17,22,0],[17,6,0],[-1,-28,1],[0,-5,1],[-5,-8,1],[-10,-40,1],[-5,-25,1],[-5,-1,1],
[1,-20,1],[-10,-5,1],[-15,-20,1],[-10,-20,1],[-8,-5,1],[-8,-35,1],[-5,-7,1],[-6,-8,1],[-13,-38,1],
[-15,-3,1],[-5,-18,1],[-3,-18,1],[-3,-2,1],[-20,-25,1],[-8,-25,1],[-6,-7,1],[-6,-19,1],[-5,-5,1],
[-5,-10,1],[-4,-9,1],[0,0,1],[-5,1,1],[-1,-8,1]]

x_zero = []
y_zero = []
y_one = []
x_one = []

for i in data:
    if i[2] ==0:
        x_zero.append(i[0])
        y_zero.append(i[1])
    elif i[2] ==1:
        x_one.append(i[0])
        y_one.append(i[1])        
    

for marker in ['o']:
    plt.plot(x_zero, y_zero, marker,
             label="marker='{0}'".format(marker))
for marker in ['*']:
    plt.plot(x_one, y_one, marker,
             label="marker='{0}'".format(marker))
plt.legend(numpoints=1)
plt.xlim(-25, 25);



# ----------- Gradient descent for three variables ----------

from sympy import *
#f = 2*x**2 + y**5 + 0.5*z

def gd(steps, gamma, x_0, y_0, z_0, partial_x,partial_y,partial_z):
    x, y, z = x_0, y_0, z_0
    
    for i in range(steps):
        #gradient descent parametric update
        x -= gamma * eval(str(partial_x))
        y -= gamma * eval(str(partial_y))
        z -= gamma * eval(str(partial_z))
        
    return x, y, z

x0,y0,z0 = 1,3,2
gd(2,1e-1, x0,y0,z0, 4*x, 5*(y**4), 0.5)
